// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id        String        @id @default(uuid())
  email     String        @unique
  name      String?
  // Boolean example
  // isAdmin Boolean
  pokemon   UserPokemon[]
  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime      @unique @default(now())
  updatedAt DateTime      @unique @default(now())
}

model UserPokemon {
  id        String   @id @default(uuid())
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  pokemon   Pokemon  @relation(fields: [pokemonId], references: [id])
  pokemonId String
  quantity  Int      @default(0)
  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}

model Pokemon {
  id                   String        @id @default(uuid())
  num                  String        @unique
  name                 String        @unique
  height               String
  weight               String
  candy                Candy
  candy_count          String
  egg                  String
  spawn_chance         Float
  avg_spawns           Float
  spawn_time           String
  // One to Many
  types                Type[]
  weaknesses           Weakness[]
  // Self Reference 
  evolutions           Pokemon[]     @relation("evolutions")
  next_evolution       Pokemon?      @relation("evolutions", fields: [next_evolution_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  next_evolution_id    String?
  previous_evolutions  Pokemon[]     @relation("previous_evolutions")
  prev_evolution       Pokemon?      @relation("previous_evolutions", fields: [prev_evolution_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prev_evolution_id    String?
  userId               Int?
  userPokemonCreatedAt DateTime?
  UserPokemon          UserPokemon[]
}

enum TypeName {
  Bug
  Dark
  Dragon
  Electric
  Fairy
  Fighting
  Fire
  Flying
  Ghost
  Grass
  Ground
  Ice
  Normal
  Poison
  Psychic
  Rock
  Steel
  Water
}

model Type {
  id        Int      @id @default(autoincrement())
  name      TypeName
  pokemon   Pokemon  @relation(fields: [pokemonId], references: [id])
  pokemonId String
}

model Weakness {
  id        Int      @id @default(autoincrement())
  name      TypeName
  pokemon   Pokemon  @relation(fields: [pokemonId], references: [id])
  pokemonId String
}

enum Candy {
  BulbasaurCandy
  CharmanderCandy
  SquirtleCandy
  CaterpieCandy
  WeedleCandy
}

enum PosterSource {
  RAW
  GITHUB
}

model Post {
  id     String       @id @default(uuid())
  name   String
  text   String
  source PosterSource @default(RAW)

  // To return `Date`s intact through the API we need to add data transformers
  // https://trpc.io/docs/data-transformers
  createdAt DateTime @unique @default(now())
  updatedAt DateTime @unique @default(now())
}
